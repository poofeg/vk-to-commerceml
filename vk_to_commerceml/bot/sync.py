from datetime import datetime
from importlib import resources

from aiogram import F, types, Router
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from pydantic import SecretStr

from vk_to_commerceml.app_state import app_state
from vk_to_commerceml.bot.models import SITE_CML_URLS, SITE_CATALOG_URLS
from vk_to_commerceml.bot.states import Form
from vk_to_commerceml.services.sync import SyncService, SyncState

router = Router()


class SyncCallback(CallbackData, prefix='sync'):
    with_disabled: bool = False
    with_photos: bool = False
    start: bool = False


@router.callback_query(Form.cml_password_entered, SyncCallback.filter(F.start))
async def callback_sync(query: types.CallbackQuery, callback_data: SyncCallback, state: FSMContext) -> None:
    started_at = datetime.now()
    data = await state.get_data()
    vk_token = SecretStr(data['vk_token'])
    vk_group_id: int = data['vk_group_id']
    cml_url: str = SITE_CML_URLS[data['cml_site']]
    cml_login: str = data['cml_login']
    cml_password = SecretStr(data['cml_password'])
    await state.update_data(sync=callback_data.model_dump_json(exclude={'start'}))
    sync_service = SyncService(
        app_state.cml_client, cml_url, cml_login, cml_password,
        app_state.vk_client, vk_token, vk_group_id
    )
    await query.answer('–ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏')
    await query.message.answer('–ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏')
    try:
        async for status, content in sync_service.sync(
            callback_data.with_disabled, callback_data.with_photos, skip_multiple_group=True
        ):
            match status:
                case SyncState.GET_PRODUCTS_SUCCESS:
                    await query.message.answer(f'–ò–∑ –í–ö —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {content} —Ç–æ–≤–∞—Ä–æ–≤')
                case SyncState.GET_PRODUCTS_FAILED:
                    await query.message.answer(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –í–ö: {content}')
                case SyncState.MAIN_SUCCESS:
                    catalog_url = SITE_CATALOG_URLS[data['cml_site']].format(login=cml_login)
                    csv_file = types.BufferedInputFile(content.encode('utf8'), filename='categories.csv')
                    caption = '–¢–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–∞–π—Ç. –ß—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤—ã–º —Ç–æ–≤–∞—Ä–∞–º –Ω—É–∂–Ω–æ ' \
                              f'–∑–∞–≥—Ä—É–∑–∏—Ç—å CSV-—Ñ–∞–π–ª –Ω–∏–∂–µ –Ω–∞ {catalog_url}, ' \
                              '–∏–Ω–∞—á–µ –æ–Ω–∏ –±—É–¥—É—Ç –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.'
                    await query.message.answer_media_group(
                        media=[
                            types.InputMediaPhoto(
                                media=types.FSInputFile(
                                    path=resources.files('vk_to_commerceml.data').joinpath('import_csv_01.png')),
                            ),
                            types.InputMediaPhoto(
                                media=types.FSInputFile(
                                    path=resources.files('vk_to_commerceml.data').joinpath('import_csv_02.png')),
                            ),
                            types.InputMediaPhoto(
                                media=types.FSInputFile(
                                    path=resources.files('vk_to_commerceml.data').joinpath('import_csv_03.png')),
                                caption=caption,
                            ),
                        ],
                    )
                    await query.message.answer_document(csv_file)
                case SyncState.MAIN_FAILED:
                    await query.message.answer(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∞–π—Ç: {content}')
                case SyncState.PHOTO_SUCCESS:
                    await query.message.answer(f'–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {content} —Ñ–æ—Ç–æ –Ω–∞ —Å–∞–π—Ç')
                case SyncState.PHOTO_FAILED:
                    await query.message.answer(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –Ω–∞ —Å–∞–π—Ç: {content}')

    except Exception as exc:
        await query.message.answer(f'–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exc}')
        return
    await query.message.answer(f'–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {datetime.now() - started_at}')


async def get_sync_markup(state: FSMContext, callback_data: SyncCallback) -> types.InlineKeyboardMarkup:
    await state.update_data(sync=callback_data.model_dump_json(exclude={'start'}))
    builder = InlineKeyboardBuilder()
    builder.button(
        text=('‚òë' if callback_data.with_disabled else '‚òê') + '  –ø–æ–ª—É—á–∞—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –≤ –í–ö',
        callback_data=callback_data.model_copy(update={'with_disabled': not callback_data.with_disabled}),
    )
    builder.button(
        text=('‚òë' if callback_data.with_photos else '‚òê') + '  —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ',
        callback_data=callback_data.model_copy(update={'with_photos': not callback_data.with_photos}),
    )
    builder.button(
        text='üöÄ –∑–∞–ø—É—Å–∫',
        callback_data=callback_data.model_copy(update={'start': True}),
    )
    builder.adjust(1)
    return builder.as_markup()


@router.callback_query(Form.cml_password_entered, SyncCallback.filter())
async def callback_config_sync(query: types.CallbackQuery, callback_data: SyncCallback, state: FSMContext) -> None:
    if isinstance(query.message, types.Message):
        await query.message.edit_reply_markup(reply_markup=await get_sync_markup(state, callback_data))
    await query.answer('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞')


@router.message(Form.cml_password_entered, Command('sync'))
async def command_sync(message: types.Message, state: FSMContext) -> None:
    data = await state.get_data()
    if data.get('sync'):
        callback_data = SyncCallback.model_validate_json(data['sync'])
    else:
        callback_data = SyncCallback()
    await message.answer(
        text='–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ',
        reply_markup=await get_sync_markup(state, callback_data),
    )
